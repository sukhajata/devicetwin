// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sukhajata/devicetwin/pkg/db (interfaces: NoSQLEngine)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNoSQLEngine is a mock of NoSQLEngine interface
type MockNoSQLEngine struct {
	ctrl     *gomock.Controller
	recorder *MockNoSQLEngineMockRecorder
}

// MockNoSQLEngineMockRecorder is the mock recorder for MockNoSQLEngine
type MockNoSQLEngineMockRecorder struct {
	mock *MockNoSQLEngine
}

// NewMockNoSQLEngine creates a new mock instance
func NewMockNoSQLEngine(ctrl *gomock.Controller) *MockNoSQLEngine {
	mock := &MockNoSQLEngine{ctrl: ctrl}
	mock.recorder = &MockNoSQLEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNoSQLEngine) EXPECT() *MockNoSQLEngineMockRecorder {
	return m.recorder
}

// ArrayAppend mocks base method
func (m *MockNoSQLEngine) ArrayAppend(arg0, arg1, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArrayAppend", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArrayAppend indicates an expected call of ArrayAppend
func (mr *MockNoSQLEngineMockRecorder) ArrayAppend(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrayAppend", reflect.TypeOf((*MockNoSQLEngine)(nil).ArrayAppend), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockNoSQLEngine) Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockNoSQLEngineMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNoSQLEngine)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockNoSQLEngine) Get(arg0, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockNoSQLEngineMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNoSQLEngine)(nil).Get), arg0, arg1, arg2)
}

// Lookup mocks base method
func (m *MockNoSQLEngine) Lookup(arg0, arg1, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lookup indicates an expected call of Lookup
func (mr *MockNoSQLEngineMockRecorder) Lookup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockNoSQLEngine)(nil).Lookup), arg0, arg1, arg2, arg3)
}

// Query mocks base method
func (m *MockNoSQLEngine) Query(arg0, arg1 string, arg2 []interface{}) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1, arg2)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockNoSQLEngineMockRecorder) Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockNoSQLEngine)(nil).Query), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockNoSQLEngine) Update(arg0, arg1, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockNoSQLEngineMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoSQLEngine)(nil).Update), arg0, arg1, arg2, arg3)
}

// Upsert mocks base method
func (m *MockNoSQLEngine) Upsert(arg0, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert
func (mr *MockNoSQLEngineMockRecorder) Upsert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockNoSQLEngine)(nil).Upsert), arg0, arg1, arg2)
}
