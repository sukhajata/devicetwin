// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sukhajata/devicetwin/internal/core (interfaces: ConfigHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/sukhajata/ppconfig"
	ppdownlink "github.com/sukhajata/ppmessage/ppdownlink"
	ppuplink "github.com/sukhajata/ppmessage/ppuplink"
	reflect "reflect"
)

// MockConfigHandler is a mock of ConfigHandler interface
type MockConfigHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConfigHandlerMockRecorder
}

// MockConfigHandlerMockRecorder is the mock recorder for MockConfigHandler
type MockConfigHandlerMockRecorder struct {
	mock *MockConfigHandler
}

// NewMockConfigHandler creates a new mock instance
func NewMockConfigHandler(ctrl *gomock.Controller) *MockConfigHandler {
	mock := &MockConfigHandler{ctrl: ctrl}
	mock.recorder = &MockConfigHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigHandler) EXPECT() *MockConfigHandlerMockRecorder {
	return m.recorder
}

// AssignRadioOffset mocks base method
func (m *MockConfigHandler) AssignRadioOffset(arg0 string, arg1 *config.Identifier) (*config.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRadioOffset", arg0, arg1)
	ret0, _ := ret[0].(*config.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignRadioOffset indicates an expected call of AssignRadioOffset
func (mr *MockConfigHandlerMockRecorder) AssignRadioOffset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRadioOffset", reflect.TypeOf((*MockConfigHandler)(nil).AssignRadioOffset), arg0, arg1)
}

// GetConfigByIndex mocks base method
func (m *MockConfigHandler) GetConfigByIndex(arg0 string, arg1 *config.GetConfigByIndexRequest) (*config.ConfigField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigByIndex", arg0, arg1)
	ret0, _ := ret[0].(*config.ConfigField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigByIndex indicates an expected call of GetConfigByIndex
func (mr *MockConfigHandlerMockRecorder) GetConfigByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigByIndex", reflect.TypeOf((*MockConfigHandler)(nil).GetConfigByIndex), arg0, arg1)
}

// GetConfigByName mocks base method
func (m *MockConfigHandler) GetConfigByName(arg0 string, arg1 *config.GetConfigByNameRequest) (*config.ConfigField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigByName", arg0, arg1)
	ret0, _ := ret[0].(*config.ConfigField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigByName indicates an expected call of GetConfigByName
func (mr *MockConfigHandlerMockRecorder) GetConfigByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigByName", reflect.TypeOf((*MockConfigHandler)(nil).GetConfigByName), arg0, arg1)
}

// GetDeviceConfig mocks base method
func (m *MockConfigHandler) GetDeviceConfig(arg0 string, arg1 *config.Identifier) (*config.ConfigFields, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceConfig", arg0, arg1)
	ret0, _ := ret[0].(*config.ConfigFields)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceConfig indicates an expected call of GetDeviceConfig
func (mr *MockConfigHandlerMockRecorder) GetDeviceConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceConfig", reflect.TypeOf((*MockConfigHandler)(nil).GetDeviceConfig), arg0, arg1)
}

// GetNewConfigDoc mocks base method
func (m *MockConfigHandler) GetNewConfigDoc(arg0 string, arg1 *config.Identifier) (*config.ConfigDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewConfigDoc", arg0, arg1)
	ret0, _ := ret[0].(*config.ConfigDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewConfigDoc indicates an expected call of GetNewConfigDoc
func (mr *MockConfigHandlerMockRecorder) GetNewConfigDoc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewConfigDoc", reflect.TypeOf((*MockConfigHandler)(nil).GetNewConfigDoc), arg0, arg1)
}

// HandleConfigUplink mocks base method
func (m *MockConfigHandler) HandleConfigUplink(arg0 *ppuplink.ConfigUplinkMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleConfigUplink", arg0)
}

// HandleConfigUplink indicates an expected call of HandleConfigUplink
func (mr *MockConfigHandlerMockRecorder) HandleConfigUplink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConfigUplink", reflect.TypeOf((*MockConfigHandler)(nil).HandleConfigUplink), arg0)
}

// SendConsistencyCheckRequest mocks base method
func (m *MockConfigHandler) SendConsistencyCheckRequest(arg0 *ppdownlink.ConfigDownlinkMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendConsistencyCheckRequest", arg0)
}

// SendConsistencyCheckRequest indicates an expected call of SendConsistencyCheckRequest
func (mr *MockConfigHandlerMockRecorder) SendConsistencyCheckRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConsistencyCheckRequest", reflect.TypeOf((*MockConfigHandler)(nil).SendConsistencyCheckRequest), arg0)
}

// SetDesired mocks base method
func (m *MockConfigHandler) SetDesired(arg0 string, arg1 *config.SetDesiredRequest) (*config.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDesired", arg0, arg1)
	ret0, _ := ret[0].(*config.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDesired indicates an expected call of SetDesired
func (mr *MockConfigHandlerMockRecorder) SetDesired(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDesired", reflect.TypeOf((*MockConfigHandler)(nil).SetDesired), arg0, arg1)
}

// UpdateFirmwareAllDevices mocks base method
func (m *MockConfigHandler) UpdateFirmwareAllDevices(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFirmwareAllDevices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFirmwareAllDevices indicates an expected call of UpdateFirmwareAllDevices
func (mr *MockConfigHandlerMockRecorder) UpdateFirmwareAllDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirmwareAllDevices", reflect.TypeOf((*MockConfigHandler)(nil).UpdateFirmwareAllDevices), arg0)
}

// UpdateReported mocks base method
func (m *MockConfigHandler) UpdateReported(arg0 *config.UpdateReportedRequest) (*config.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReported", arg0)
	ret0, _ := ret[0].(*config.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReported indicates an expected call of UpdateReported
func (mr *MockConfigHandlerMockRecorder) UpdateReported(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReported", reflect.TypeOf((*MockConfigHandler)(nil).UpdateReported), arg0)
}
